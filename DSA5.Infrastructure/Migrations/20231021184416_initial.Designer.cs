// <auto-generated />
using System;
using DSA5.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DSA5.Infrastructure.Migrations
{
    [DbContext(typeof(DsaDbContext))]
    [Migration("20231021184416_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DSA5.Entities.Meta.Erfahrungsgrad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApGuthaben")
                        .HasColumnType("integer");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxEigenschaftWert")
                        .HasColumnType("integer");

                    b.Property<int>("MaxEigenschaftsPunkte")
                        .HasColumnType("integer");

                    b.Property<int>("MaxFertigkeitWert")
                        .HasColumnType("integer");

                    b.Property<int>("MaxFremdzauber")
                        .HasColumnType("integer");

                    b.Property<int>("MaxKampftechnikWert")
                        .HasColumnType("integer");

                    b.Property<int>("MaxZauberLiturgien")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Erfahrungsgrad");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.KulturEmpfiehltNachteil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Empfehlungsstufe")
                        .HasColumnType("integer");

                    b.Property<Guid>("KulturId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NachteilId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KulturId");

                    b.HasIndex("NachteilId");

                    b.ToTable("KulturEmpfiehltNachteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.KulturEmpfiehltTalent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Empfehlungsstufe")
                        .HasColumnType("integer");

                    b.Property<Guid>("KulturId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TalentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KulturId");

                    b.HasIndex("TalentId");

                    b.ToTable("KulturEmpfiehltTalent");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.KulturEmpfiehltVorteil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Empfehlungsstufe")
                        .HasColumnType("integer");

                    b.Property<Guid>("KulturId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VorteilId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KulturId");

                    b.HasIndex("VorteilId");

                    b.ToTable("KulturEmpfiehltVorteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.LiturgieVerbreitung", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LiturgieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraditionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ZauberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LiturgieId");

                    b.ToTable("LiturgieVerbreitung");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.NachteilBrauchtVorteil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NachteilId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VorteilId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NachteilId");

                    b.ToTable("NachteilBrauchtVorteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.NachteilEmpfiehltNachteil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmpfehlungId")
                        .HasColumnType("uuid");

                    b.Property<int>("Empfehlungsstufe")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NachteilId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmpfehlungId");

                    b.ToTable("NachteilEmpfiehltNachteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.ProfessionEmpfiehltNachteil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Empfehlungsstufe")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NachteilId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfessionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NachteilId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("ProfessionEmpfiehltNachteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.ProfessionEmpfiehltSonderfertigkeit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Empfehlungsstufe")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SonderfertigkeitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("SonderfertigkeitId");

                    b.ToTable("ProfessionEmpfiehltSonderfertigkeit");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.ProfessionEmpfiehltVorteil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Empfehlungsstufe")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VorteilId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("VorteilId");

                    b.ToTable("ProfessionEmpfiehltVorteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SonderfertigkeitBrauchtAspekt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AnzahlLiturgien")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GesamtStufe")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SonderfertigkeitId")
                        .HasColumnType("uuid");

                    b.Property<int>("StufeProLiturgie")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SonderfertigkeitBrauchtAspekt");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SonderfertigkeitBrauchtEigenschaft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EigenschaftId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SonderfertigkeitId")
                        .HasColumnType("uuid");

                    b.Property<int>("Wert")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EigenschaftId");

                    b.HasIndex("SonderfertigkeitId");

                    b.ToTable("SonderfertigkeitBrauchtEigenschaft");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SonderfertigkeitBrauchtLeiteigenschaft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MinWert")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SonderfertigkeitBrauchtLeiteigenschaft");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SonderfertigkeitBrauchtMerkmal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AnzahlZauber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GesamtStufe")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SonderfertigkeitId")
                        .HasColumnType("uuid");

                    b.Property<int>("StufeProZauber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SonderfertigkeitBrauchtMerkmal");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SonderfertigkeitBrauchtSonderfertigkeit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SonderfertigkeitId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VoraussetzungId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VoraussetzungId");

                    b.ToTable("SonderfertigkeitBrauchtSonderfertigkeit");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SonderfertigkeitBrauchtSpezies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SonderfertigkeitId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpeziesId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("SonderfertigkeitBrauchtSpezies");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SonderfertigkeitBrauchtTalent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SonderfertigkeitId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TalentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Wert")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SonderfertigkeitId");

                    b.HasIndex("TalentId");

                    b.ToTable("SonderfertigkeitBrauchtTalent");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SonderfertigkeitBrauchtVorteil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SonderfertigkeitId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VorteilId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SonderfertigkeitId");

                    b.ToTable("SonderfertigkeitBrauchtVorteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SonderfertigkeitEmpfiehltSonderfertigkeit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmpfehlungId")
                        .HasColumnType("uuid");

                    b.Property<int>("Empfehlungsstufe")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SonderfertigkeitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("SonderfertigkeitEmpfiehltSonderfertigkeit");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SpeziesEmpfiehltKultur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Empfehlungsstufe")
                        .HasColumnType("integer");

                    b.Property<Guid>("KulturId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SpeziesId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("KulturId");

                    b.HasIndex("SpeziesId");

                    b.ToTable("SpeziesEmpfiehltKultur");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SpeziesEmpfiehltNachteil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Empfehlungsstufe")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NachteilId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpeziesId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NachteilId");

                    b.HasIndex("SpeziesId");

                    b.ToTable("SpeziesEmpfiehltNachteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SpeziesEmpfiehltVorteil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Empfehlungsstufe")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SpeziesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VorteilId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SpeziesId");

                    b.HasIndex("VorteilId");

                    b.ToTable("SpeziesEmpfiehltVorteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.TraditionEmpfiehltSonderfertigkeit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Empfehlungsstufe")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SonderfertigkeitId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraditionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("TraditionEmpfiehltSonderfertigkeit");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.VorteilBrauchtVorteil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VoraussetzungId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ZielId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ZielId");

                    b.ToTable("VorteilBrauchtVorteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.VorteilEmpfiehltNachteil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Empfehlungsstufe")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NachteilId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VorteilId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VorteilId");

                    b.ToTable("VorteilEmpfiehltNachteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.ZauberVerbreitung", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TraditionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ZauberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ZauberId");

                    b.ToTable("ZauberVerbreitung");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Steigerungsfaktor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApKostenMultiplikator")
                        .HasColumnType("integer");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Steigerungsfaktor");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Anwendungsgebiet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TalentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Anwendungsgebiet");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Aspekt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Aspekt");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Eigenschaft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Kuerzel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Eigenschaft");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Kampftechnik", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SteigerungsfaktorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SteigerungsfaktorId");

                    b.ToTable("Kampftechnik");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Kultur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApWert")
                        .HasColumnType("integer");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("KulturgruppeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KulturgruppeId");

                    b.ToTable("Kultur");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Kulturgruppe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Kulturgruppe");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Merkmal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Merkmal");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Modifikatoren.SonderfertigkeitBedingtAnwendungsgebiet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnwendungsgebietId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SonderfertigkeitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AnwendungsgebietId");

                    b.ToTable("SonderfertigkeitBedingtAnwendungsgebiet");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Modifikatoren.SonderfertigkeitBedingtNachteil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("NachteilId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SonderfertigkeitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NachteilId");

                    b.ToTable("SonderfertigkeitBedingtNachteil");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Modifikatoren.SpeziesBedingtEigenschaften", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SpeziesId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SpeziesId");

                    b.ToTable("SpeziesBedingtEigenschaften");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Modifikatoren.SpeziesKannEigenschaftBedingen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BedingteEigenschaftenId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EigenschaftId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SpeziesBedingtEigenschaftenId")
                        .HasColumnType("uuid");

                    b.Property<int>("Wert")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EigenschaftId");

                    b.HasIndex("SpeziesBedingtEigenschaftenId");

                    b.ToTable("SpeziesKannEigenschaftBedingen");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Nachteil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApProStufe")
                        .HasColumnType("integer");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IstPersoenlichkeitsschwaeche")
                        .HasColumnType("boolean");

                    b.Property<bool>("IstSchlechteEigenschaft")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxAnzahl")
                        .HasColumnType("integer");

                    b.Property<int>("MaxStufe")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Nachteil");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Profession");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Sonderfertigkeit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApKosten")
                        .HasColumnType("integer");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sonderfertigkeit");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Spezies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApKosten")
                        .HasColumnType("integer");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Geschwindigkeit")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Lebenspunkte")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Seelenkraft")
                        .HasColumnType("integer");

                    b.Property<int>("Zaehigkeit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Spezies");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Talent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BeeinflusstDurchBelastung")
                        .HasColumnType("integer");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SteigerungsfaktorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TalentgruppeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Wurf1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Wurf2Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Wurf3Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SteigerungsfaktorId");

                    b.HasIndex("TalentgruppeId");

                    b.HasIndex("Wurf1Id");

                    b.HasIndex("Wurf2Id");

                    b.HasIndex("Wurf3Id");

                    b.ToTable("Talent");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Talentgruppe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Wurf1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Wurf2Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Wurf3Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Wurf1Id");

                    b.HasIndex("Wurf2Id");

                    b.HasIndex("Wurf3Id");

                    b.ToTable("Talentgruppe");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Tradition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApKosten")
                        .HasColumnType("integer");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LeiteigenschaftId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LeiteigenschaftId");

                    b.ToTable("Tradition");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Vorteil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApProStufe")
                        .HasColumnType("integer");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MaxAnzahl")
                        .HasColumnType("integer");

                    b.Property<int>("MaxStufe")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vorteil");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Schrift", b =>
                {
                    b.HasBaseType("DSA5.Entities.Welt.Sonderfertigkeit");

                    b.ToTable("Schrift");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Segnung", b =>
                {
                    b.HasBaseType("DSA5.Entities.Welt.Sonderfertigkeit");

                    b.Property<Guid>("AspektId")
                        .HasColumnType("uuid");

                    b.Property<int>("KarmalKosten")
                        .HasColumnType("integer");

                    b.ToTable("Segnung");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Sprache", b =>
                {
                    b.HasBaseType("DSA5.Entities.Welt.Sonderfertigkeit");

                    b.ToTable("Sprache");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Stabzauber", b =>
                {
                    b.HasBaseType("DSA5.Entities.Welt.Sonderfertigkeit");

                    b.Property<Guid>("MerkmalId")
                        .HasColumnType("uuid");

                    b.Property<int>("Volumen")
                        .HasColumnType("integer");

                    b.ToTable("Stabzauber");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Zaubertrick", b =>
                {
                    b.HasBaseType("DSA5.Entities.Welt.Sonderfertigkeit");

                    b.Property<Guid>("MerkmalId")
                        .HasColumnType("uuid");

                    b.ToTable("Zaubertrick");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Liturgie", b =>
                {
                    b.HasBaseType("DSA5.Entities.Welt.Talent");

                    b.ToTable("Liturgie");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Zauber", b =>
                {
                    b.HasBaseType("DSA5.Entities.Welt.Talent");

                    b.Property<bool>("ModifiziertDurchSeelenkraft")
                        .HasColumnType("boolean");

                    b.Property<bool>("ModifiziertDurchZaehigkeit")
                        .HasColumnType("boolean");

                    b.ToTable("Zauber");
                });

            modelBuilder.Entity("DSA5.Infrastructure.Identity.DsaRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("DsaRole");
                });

            modelBuilder.Entity("DSA5.Infrastructure.Identity.DsaUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("DsaUser");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Fluch", b =>
                {
                    b.HasBaseType("DSA5.Entities.Welt.Zauber");

                    b.ToTable("Fluch");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.KulturEmpfiehltNachteil", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Kultur", null)
                        .WithMany("EmpfohleneNachteile")
                        .HasForeignKey("KulturId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Nachteil", "Nachteil")
                        .WithMany()
                        .HasForeignKey("NachteilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nachteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.KulturEmpfiehltTalent", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Kultur", null)
                        .WithMany("EmpfohleneTalente")
                        .HasForeignKey("KulturId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Talent", "Talent")
                        .WithMany()
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Talent");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.KulturEmpfiehltVorteil", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Kultur", null)
                        .WithMany("EmpfohleneVorteile")
                        .HasForeignKey("KulturId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Vorteil", "Vorteil")
                        .WithMany()
                        .HasForeignKey("VorteilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vorteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.LiturgieVerbreitung", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Liturgie", null)
                        .WithMany("Verbreitung")
                        .HasForeignKey("LiturgieId");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.NachteilBrauchtVorteil", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Nachteil", "Nachteil")
                        .WithMany()
                        .HasForeignKey("NachteilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nachteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.NachteilEmpfiehltNachteil", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Nachteil", "Empfehlung")
                        .WithMany()
                        .HasForeignKey("EmpfehlungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empfehlung");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.ProfessionEmpfiehltNachteil", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Nachteil", "Nachteil")
                        .WithMany()
                        .HasForeignKey("NachteilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Profession", null)
                        .WithMany("EmpfohleneNachteile")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nachteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.ProfessionEmpfiehltSonderfertigkeit", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Profession", null)
                        .WithMany("EmpfohleneSonderfertigkeiten")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Sonderfertigkeit", "Sonderfertigkeit")
                        .WithMany()
                        .HasForeignKey("SonderfertigkeitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sonderfertigkeit");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.ProfessionEmpfiehltVorteil", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Profession", null)
                        .WithMany("EmpfohleneVorteile")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Vorteil", "Vorteil")
                        .WithMany()
                        .HasForeignKey("VorteilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vorteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SonderfertigkeitBrauchtEigenschaft", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Eigenschaft", "Eigenschaft")
                        .WithMany()
                        .HasForeignKey("EigenschaftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Sonderfertigkeit", null)
                        .WithMany("EigenschaftVoraussetzungen")
                        .HasForeignKey("SonderfertigkeitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eigenschaft");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SonderfertigkeitBrauchtSonderfertigkeit", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Sonderfertigkeit", "Voraussetzung")
                        .WithMany("SonderfertigkeitVoraussetzungen")
                        .HasForeignKey("VoraussetzungId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voraussetzung");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SonderfertigkeitBrauchtTalent", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Sonderfertigkeit", null)
                        .WithMany("TalentVoraussetzungen")
                        .HasForeignKey("SonderfertigkeitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Talent", "Talent")
                        .WithMany()
                        .HasForeignKey("TalentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Talent");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SonderfertigkeitBrauchtVorteil", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Sonderfertigkeit", null)
                        .WithMany("VorteilVoraussetzungen")
                        .HasForeignKey("SonderfertigkeitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SpeziesEmpfiehltKultur", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Kultur", "Kultur")
                        .WithMany()
                        .HasForeignKey("KulturId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Spezies", null)
                        .WithMany("EmpfohleneKulturen")
                        .HasForeignKey("SpeziesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kultur");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SpeziesEmpfiehltNachteil", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Nachteil", "Nachteil")
                        .WithMany()
                        .HasForeignKey("NachteilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Spezies", null)
                        .WithMany("EmpfohleneNachteile")
                        .HasForeignKey("SpeziesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nachteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.SpeziesEmpfiehltVorteil", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Spezies", null)
                        .WithMany("EmpfohleneVorteile")
                        .HasForeignKey("SpeziesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Vorteil", "Vorteil")
                        .WithMany()
                        .HasForeignKey("VorteilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vorteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.VorteilBrauchtVorteil", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Vorteil", "Ziel")
                        .WithMany()
                        .HasForeignKey("ZielId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ziel");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.VorteilEmpfiehltNachteil", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Vorteil", "Vorteil")
                        .WithMany()
                        .HasForeignKey("VorteilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vorteil");
                });

            modelBuilder.Entity("DSA5.Entities.Meta.Korrelationen.ZauberVerbreitung", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Zauber", null)
                        .WithMany("Verbreitung")
                        .HasForeignKey("ZauberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Kampftechnik", b =>
                {
                    b.HasOne("DSA5.Entities.Meta.Steigerungsfaktor", "Steigerungsfaktor")
                        .WithMany()
                        .HasForeignKey("SteigerungsfaktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Steigerungsfaktor");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Kultur", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Kulturgruppe", null)
                        .WithMany("Kulturen")
                        .HasForeignKey("KulturgruppeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Modifikatoren.SonderfertigkeitBedingtAnwendungsgebiet", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Anwendungsgebiet", "Anwendungsgebiet")
                        .WithMany()
                        .HasForeignKey("AnwendungsgebietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anwendungsgebiet");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Modifikatoren.SonderfertigkeitBedingtNachteil", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Nachteil", "Nachteil")
                        .WithMany()
                        .HasForeignKey("NachteilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nachteil");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Modifikatoren.SpeziesBedingtEigenschaften", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Spezies", null)
                        .WithMany("EigenschaftModifikatoren")
                        .HasForeignKey("SpeziesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Modifikatoren.SpeziesKannEigenschaftBedingen", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Eigenschaft", "Eigenschaft")
                        .WithMany()
                        .HasForeignKey("EigenschaftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Modifikatoren.SpeziesBedingtEigenschaften", null)
                        .WithMany("BedingteEigenschaftMoeglichkeiten")
                        .HasForeignKey("SpeziesBedingtEigenschaftenId");

                    b.Navigation("Eigenschaft");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Talent", b =>
                {
                    b.HasOne("DSA5.Entities.Meta.Steigerungsfaktor", "Steigerungsfaktor")
                        .WithMany()
                        .HasForeignKey("SteigerungsfaktorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Talentgruppe", "Talentgruppe")
                        .WithMany()
                        .HasForeignKey("TalentgruppeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Eigenschaft", "Wurf1")
                        .WithMany()
                        .HasForeignKey("Wurf1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Eigenschaft", "Wurf2")
                        .WithMany()
                        .HasForeignKey("Wurf2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Eigenschaft", "Wurf3")
                        .WithMany()
                        .HasForeignKey("Wurf3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Steigerungsfaktor");

                    b.Navigation("Talentgruppe");

                    b.Navigation("Wurf1");

                    b.Navigation("Wurf2");

                    b.Navigation("Wurf3");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Talentgruppe", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Eigenschaft", "Wurf1")
                        .WithMany()
                        .HasForeignKey("Wurf1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Eigenschaft", "Wurf2")
                        .WithMany()
                        .HasForeignKey("Wurf2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSA5.Entities.Welt.Eigenschaft", "Wurf3")
                        .WithMany()
                        .HasForeignKey("Wurf3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wurf1");

                    b.Navigation("Wurf2");

                    b.Navigation("Wurf3");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Tradition", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Eigenschaft", "Leiteigenschaft")
                        .WithMany()
                        .HasForeignKey("LeiteigenschaftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leiteigenschaft");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Schrift", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Sonderfertigkeit", null)
                        .WithOne()
                        .HasForeignKey("DSA5.Entities.Welt.Schrift", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Segnung", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Sonderfertigkeit", null)
                        .WithOne()
                        .HasForeignKey("DSA5.Entities.Welt.Segnung", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Sprache", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Sonderfertigkeit", null)
                        .WithOne()
                        .HasForeignKey("DSA5.Entities.Welt.Sprache", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Stabzauber", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Sonderfertigkeit", null)
                        .WithOne()
                        .HasForeignKey("DSA5.Entities.Welt.Stabzauber", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Zaubertrick", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Sonderfertigkeit", null)
                        .WithOne()
                        .HasForeignKey("DSA5.Entities.Welt.Zaubertrick", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Liturgie", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Talent", null)
                        .WithOne()
                        .HasForeignKey("DSA5.Entities.Welt.Liturgie", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Zauber", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Talent", null)
                        .WithOne()
                        .HasForeignKey("DSA5.Entities.Welt.Zauber", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Fluch", b =>
                {
                    b.HasOne("DSA5.Entities.Welt.Zauber", null)
                        .WithOne()
                        .HasForeignKey("DSA5.Entities.Welt.Fluch", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Kultur", b =>
                {
                    b.Navigation("EmpfohleneNachteile");

                    b.Navigation("EmpfohleneTalente");

                    b.Navigation("EmpfohleneVorteile");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Kulturgruppe", b =>
                {
                    b.Navigation("Kulturen");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Modifikatoren.SpeziesBedingtEigenschaften", b =>
                {
                    b.Navigation("BedingteEigenschaftMoeglichkeiten");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Profession", b =>
                {
                    b.Navigation("EmpfohleneNachteile");

                    b.Navigation("EmpfohleneSonderfertigkeiten");

                    b.Navigation("EmpfohleneVorteile");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Sonderfertigkeit", b =>
                {
                    b.Navigation("EigenschaftVoraussetzungen");

                    b.Navigation("SonderfertigkeitVoraussetzungen");

                    b.Navigation("TalentVoraussetzungen");

                    b.Navigation("VorteilVoraussetzungen");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Spezies", b =>
                {
                    b.Navigation("EigenschaftModifikatoren");

                    b.Navigation("EmpfohleneKulturen");

                    b.Navigation("EmpfohleneNachteile");

                    b.Navigation("EmpfohleneVorteile");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Liturgie", b =>
                {
                    b.Navigation("Verbreitung");
                });

            modelBuilder.Entity("DSA5.Entities.Welt.Zauber", b =>
                {
                    b.Navigation("Verbreitung");
                });
#pragma warning restore 612, 618
        }
    }
}
